{"version":3,"sources":["logo.svg","md.marked.js","md.markdown-it.js","md.remark.js","md.remarkable.js","md.showdown.js","md.previewer.js","fmt.html.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","md","marked","markdownIt","MarkdownIt","render","remarkProcessor","remark","use","remarkGuidePlugin","remarkHtmlPlugin","String","processSync","renderer","Remarkable","converter","Converter","makeHtml","html","name","Row","Col","Card","className","Header","Body","JSON","stringify","prettier","format","parser","plugins","prettierHtml","dangerouslySetInnerHTML","__html","App","defaultMd","useState","setMd","markedHtml","setMarkedHtml","markdownItHtml","setMarkdownItHtml","remarkHtml","setRemarkHtml","remarkable","remarkableHtml","setRemarkableHtml","showdown","showdownHtml","setShowdownHtml","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","FormControl","as","style","placeholder","value","onChange","e","a","target","Tabs","defaultActiveKey","transition","id","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e55c972.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import marked from \"marked\";\n\nexport default (md) => marked(md);\n","import MarkdownIt from \"markdown-it\";\nconst markdownIt = new MarkdownIt();\n\nexport default (md) => markdownIt.render(md);\n","import remark from \"remark\";\nimport remarkGuidePlugin from \"remark-preset-lint-markdown-style-guide\";\nimport remarkHtmlPlugin from \"remark-html\";\n\nconst remarkProcessor = remark().use(remarkGuidePlugin).use(remarkHtmlPlugin);\n\nexport default (md) => String(remarkProcessor.processSync(md));\n","import { Remarkable } from \"remarkable\";\n\nconst renderer = new Remarkable();\n\nexport default (md) => renderer.render(md);\n","import { Converter } from \"showdown\";\n\nconst converter = new Converter();\n\nexport default (md) => converter.makeHtml(md);\n","import React from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\n\nimport prettier from \"./fmt.html\";\n\nexport default ({ html, name }) => {\n  return (\n    <>\n      <Row>\n        <Col>\n          <Card className=\"rounded-0\">\n            <Card.Header>【{name}】Markdown 原文字符串</Card.Header>\n            <Card.Body>\n              <p>\n                <code>{JSON.stringify(html)}</code>\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card className=\"rounded-0\">\n            <Card.Header>【{name}】格式化后的 Markdown</Card.Header>\n            <Card.Body>\n              <pre>{prettier(html)}</pre>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card className=\"rounded-0\">\n            <Card.Header>【{name}】渲染结果</Card.Header>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{ __html: html }} />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","import prettier from \"prettier/standalone\";\nimport prettierHtml from \"prettier/parser-html\";\n\nexport default (html) =>\n  prettier.format(html, {\n    parser: \"html\",\n    plugins: [prettierHtml],\n  });\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport { FormControl, Row, Col, Tab, Tabs, Navbar } from \"react-bootstrap\";\n\nimport marked from \"./md.marked\";\nimport markdownIt from \"./md.markdown-it\";\nimport remark from \"./md.remark\";\nimport remarkable from \"./md.remarkable\";\nimport showdown from \"./md.showdown\";\n\nimport MarkdownPreviewer from \"./md.previewer\";\n\nfunction App() {\n  const defaultMd = `安卓\\n苹果\\n\\n*柯南* **步美** ***光彦*** <span style=\"color:red\">元太</span> 园子\\n\\n- 昌平\\n- 朝阳\\n* 海淀`;\n  const [md, setMd] = useState(defaultMd);\n  const [markedHtml, setMarkedHtml] = useState(marked(defaultMd));\n  const [markdownItHtml, setMarkdownItHtml] = useState(markdownIt(defaultMd));\n  const [remarkHtml, setRemarkHtml] = useState(remark(defaultMd));\n  const [remarkableHtml, setRemarkableHtml] = useState(remarkable(defaultMd));\n  const [showdownHtml, setShowdownHtml] = useState(showdown(defaultMd));\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">\n          <img alt=\"\" src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" /> 几个 Markdown Parser\n          的比较。这里使用的均是默认配置。请随便编辑一下看看各家的渲染结果差异\n        </Navbar.Brand>\n      </Navbar>\n      <Row className=\"mx-0 py-3\">\n        <Col md={6}>\n          <FormControl\n            as=\"textarea\"\n            style={{ height: \"calc(100vh - 88px)\" }}\n            placeholder=\"请在此输入 markdown\"\n            value={md}\n            onChange={async (e) => {\n              const { value } = e.target;\n              setMarkedHtml(marked(value));\n              setMarkdownItHtml(markdownIt(value));\n              setRemarkHtml(remark(value));\n              setRemarkableHtml(remarkable(value));\n              setShowdownHtml(showdown(value));\n              setMd(value);\n            }}\n          />\n        </Col>\n        <Col md={6}>\n          <Tabs defaultActiveKey=\"marked\" transition={false} id=\"noanim-tab-example\">\n            <Tab eventKey=\"remark\" title=\"Remark\">\n              <MarkdownPreviewer name=\"remark\" html={remarkHtml} />\n            </Tab>\n            <Tab eventKey=\"remarkable\" title=\"Remarkable\">\n              <MarkdownPreviewer name=\"remarkable\" html={remarkableHtml} />\n            </Tab>\n            <Tab eventKey=\"markdown-it\" title=\"Markdown It\">\n              <MarkdownPreviewer name=\"markdown-it\" html={markdownItHtml} />\n            </Tab>\n            <Tab eventKey=\"marked\" title=\"Marked\">\n              <MarkdownPreviewer name=\"marked\" html={markedHtml} />\n            </Tab>\n            <Tab eventKey=\"showdown\" title=\"Showdown\">\n              <MarkdownPreviewer name=\"showdown\" html={showdownHtml} />\n            </Tab>\n          </Tabs>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}